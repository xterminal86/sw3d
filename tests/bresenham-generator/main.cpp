#include <cstdint>
#include <cstdio>

#include "blg.h"

int main(int argc, char* argv[])
{
  auto Test = [](int x1, int y1, int x2, int y2)
  {
    printf("(%d, %d) - (%d, %d)\n\n", x1, y1, x2, y2);

    BLG bg;

    bg.Init(x1, y1, x2, y2);

    BLG::Point* p = bg.Next();
    while (p != nullptr)
    {
      printf("(%d, %d)\n", p->first, p->second);
      p = bg.Next();
    }

    printf("-----\n");
  };

  //Test(0, 0, 10, 10);
  //Test(10, 10, 0, 0);
  //Test(10, 10, 20, 9);
  //Test(20, 9, 10, 10);
  //Test(10, 10, 20, 11);
  //Test(20, 11, 10, 10);
  //Test(10, 10, 20, 15);
  //Test(10, 10, 20, 5);
  //Test(10, 10, 15, 20);

  //
  // BUG: two line segments from the same line do not produce the same set of
  //      points. That's why we have dropouts in rasterization if used with this
  //      generator.
  //
  // (0, 0) - (3, 3)
  //
  // (0, 0)
  // (1, 1)
  // (2, 2)
  // (3, 3)
  // -----
  // (3, 3) - (9, 10)
  //
  // (3, 3)
  // (4, 4)
  // (5, 5)
  // (6, 6) !
  // (6, 7)
  // (7, 8)
  // (8, 9)
  // (9, 10)
  // -----
  // (0, 0) - (9, 10)
  //
  // (0, 0)
  // (1, 1)
  // (2, 2)
  // (3, 3)
  // (4, 4)
  // (5, 5)
  // (5, 6) !
  // (6, 7)
  // (7, 8)
  // (8, 9)
  // (9, 10)
  // -----
  //
  // >>> (13.6384 - 10.1522) / (56.742584 - 53.8462)
  // 1.2036387440339413
  // >>> for x in range(0, 10):
  // ...   y = 1.2036387440339413 * float(x);
  // ...   print(f"{x} {y}")
  // ...
  // 0 0.0
  // 1 1.2036387440339413
  // 2 2.4072774880678827
  // 3 3.610916232101824
  // 4 4.814554976135765
  // 5 6.018193720169707
  // 6 7.221832464203648
  // 7 8.425471208237589
  // 8 9.62910995227153
  // 9 10.832748696305472
  //
  Test(0, 0, 3, 3);
  Test(3, 3, 9, 10);

  Test(0, 0, 9, 10);

  //
  //Test(53.4862, 10.1522, 50,      50);
  //Test(53.4862, 10.1522, 86.9233, 50);
  //
  //Test(53.8462, 10.1522, 56.7425, 13.6384);
  //Test(53.8462, 10.1522, 93.334,  13.6384);

  //Test(53.4862, 10.1522, 50, 50);
  //Test(53.4862, 10.1522, 86.92335, 50);

  //Test(53.8462, 10.1522, 56.742584, 13.6384);
  //Test(53.8462, 10.1522, 93.334, 13.6384);

  return 0;
}

